package Test;

import 二分查找.Search;

/**
 * 使用递归实现二分查找
 * 递归的二分查找和非递归的二分查找效率都为O(logN)，递归的二分查找更加简洁，便于理解，但是速度会比非递归的慢。
 * 
 * 
 * 当我们求解某些问题时，由于这些问题要处理的数据相当多，或求解过程相当复杂，使得直接求解法在时间上相当长，或者根本无法直接求出。
 * 对于这类问题，我们往往先把它分解成几个子问题，找到求出这几个子问题的解法后，再找到合适的方法，把它们组合成求整个问题的解法。
 * 如果这些子问题还较大，难以解决，可以再把它们分成几个更小的子问题，以此类推，直至可以直接求出解为止。这就是分治策略的基本思想。
 * 上面讲的递归的二分查找法就是一个分治算法的典型例子，分治算法常常是一个方法，在这个方法中含有两个对自身的递归调用，分别对应于问题的两个部分。
 * 二分查找中，将查找范围分成比查找值大的一部分和比查找值小的一部分，每次递归调用只会有一个部分执行。
 * @author pxs
 *
 */
public class TestSearch {
	public static void main(String[] args) {
		Search search = new Search();

		int[] array = {1,2,3,4,5};

		int key = 4;
		
		int result = search.search(array, key, 0, array.length-1);
		
		System.err.println(result);
	}

}
